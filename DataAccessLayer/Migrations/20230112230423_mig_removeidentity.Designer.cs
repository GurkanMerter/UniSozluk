// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230112230423_mig_removeidentity")]
    partial class mig_removeidentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntityLayer.Concrete.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"), 1L, 1);

                    b.Property<string>("CommentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CommentStatus")
                        .HasColumnType("bit");

                    b.Property<string>("CommentUserNickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntryID")
                        .HasColumnType("int");

                    b.Property<int>("EntryScore")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("EntryID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Departmant", b =>
                {
                    b.Property<int>("DepartmantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmantID"), 1L, 1);

                    b.Property<string>("DepartmantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DepartmantStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("UniversityID")
                        .HasColumnType("int");

                    b.HasKey("DepartmantID");

                    b.HasIndex("UniversityID");

                    b.ToTable("Departmants");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Entry", b =>
                {
                    b.Property<int>("EntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryID"), 1L, 1);

                    b.Property<int?>("DepartmantID")
                        .HasColumnType("int");

                    b.Property<string>("EntryContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EntryStatus")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("EntryID");

                    b.HasIndex("DepartmantID");

                    b.HasIndex("UserID");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("EntityLayer.Concrete.EntryLike", b =>
                {
                    b.Property<int>("EntryLikeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryLikeID"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("EntryID")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("EntryLikeID");

                    b.ToTable("EntryLikes");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"), 1L, 1);

                    b.Property<string>("NotificationColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotificationStatus")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationTypeSymbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EntityLayer.Concrete.University", b =>
                {
                    b.Property<int>("UniversityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniversityID"), 1L, 1);

                    b.Property<string>("UniversityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UniversityStatus")
                        .HasColumnType("bit");

                    b.HasKey("UniversityID");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("EntityLayer.Concrete.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<int?>("DepartmantID")
                        .HasColumnType("int");

                    b.Property<string>("UserFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UserStatus")
                        .HasColumnType("bit");

                    b.Property<string>("UserTelNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("DepartmantID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Comment", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Entry", "Entry")
                        .WithMany("Comments")
                        .HasForeignKey("EntryID");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Departmant", b =>
                {
                    b.HasOne("EntityLayer.Concrete.University", "University")
                        .WithMany("Departmants")
                        .HasForeignKey("UniversityID");

                    b.Navigation("University");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Entry", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Departmant", "Departmant")
                        .WithMany("Entries")
                        .HasForeignKey("DepartmantID");

                    b.HasOne("EntityLayer.Concrete.User", "Users")
                        .WithMany("Entrys")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departmant");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EntityLayer.Concrete.User", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Departmant", "Departmant")
                        .WithMany("Users")
                        .HasForeignKey("DepartmantID");

                    b.Navigation("Departmant");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Departmant", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Entry", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("EntityLayer.Concrete.University", b =>
                {
                    b.Navigation("Departmants");
                });

            modelBuilder.Entity("EntityLayer.Concrete.User", b =>
                {
                    b.Navigation("Entrys");
                });
#pragma warning restore 612, 618
        }
    }
}
